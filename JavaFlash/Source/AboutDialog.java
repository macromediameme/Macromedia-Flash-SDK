/*===========================================================================
|                                         
|                     Copyright 1994-97 Macromedia, Inc. 
|                                         
|      This material is the confidential trade secret and proprietary  
|      information of Macromedia, Inc.  It may not be reproduced, used,
|      sold or transferred to any third party without the prior written
|      consent of Macromedia, Inc.  All rights reserved.
|
|==========================================================================*/

//package com.macromedia.flash;

/*
	A basic extension of the java.awt.Dialog class
 */

import java.awt.*;
import java.io.*;

public class AboutDialog extends Dialog 
{

    FlashApi  flashPlayer;

	public AboutDialog(Frame parent, boolean modal)
	{
		super(parent, modal);

		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.

        
        // try to play the about movie if present
        try 
        {
            //
            // create a controll obect for the flash object
            // and give it an area to draw in
            //
            flashPlayer = new FlashApi(new Flash());

    	    flashPlayer.LoadScript(new FileInputStream("about.swf"));

		    setSize(insets().left + insets().right + 500,insets().top + insets().bottom + 400);
            flashPlayer.SetComponent(this);
            flashPlayer.Startup();
            flashPlayer.SetQuality(FlashApi.QUALITY_HIGH, true);
            flashPlayer.Play();

            // for some reason we need to create this
            // okButton in order to be able
            // to leave the about box by pressing (X)
    		okButton = new java.awt.Button();
    		okButton.setLabel("OK");
    		add(okButton);

    		setLayout(null);
    		setTitle("About");
    		setResizable(false);

    		SymWindow aSymWindow = new SymWindow();
    		this.addWindowListener(aSymWindow);

        } catch (Exception e) {
            flashPlayer = null;
        
    		//{{INIT_CONTROLS
		setLayout(null);
		setVisible(false);
		setSize(insets().left + insets().right + 320,insets().top + insets().bottom + 280);
		label1 = new java.awt.Label("Flash 2.0 Player Java Edition");
		label1.setBounds(insets().left + 72,insets().top + 102,166,21);
		add(label1);
		okButton = new java.awt.Button();
		okButton.setLabel("OK");
		okButton.setBounds(insets().left + 126,insets().top + 240,66,27);
		add(okButton);
		setTitle("About");
		//}}

    		//{{REGISTER_LISTENERS
// keep disabled bug in java we get into infinite loop
//    		SymWindow aSymWindow = new SymWindow();
//    		this.addWindowListener(aSymWindow);
    		SymAction lSymAction = new SymAction();
    		okButton.addActionListener(lSymAction);
		    SymMouse aSymMouse = new SymMouse();
		    this.addMouseListener(aSymMouse);
    		//}}

        }
	}

	public AboutDialog(Frame parent, String title, boolean modal) 
	{
		this(parent, modal);
		setTitle(title);
	}

    public void update(Graphics g)
    {
        if (flashPlayer != null)
            flashPlayer.Update(g);
    }
    
    public void paint(Graphics g)
    {
        if (flashPlayer != null)
            flashPlayer.Paint(g);
    }

	public void addNotify()
	{
        // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();
	    
		super.addNotify();

	    // Only do this once.
		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(insets().left + insets().right + getSize().width, insets().top + insets().bottom + getSize().height);
		Component components[] = getComponents();

		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}
		
        // Used for addNotify check.
		fComponentsAdjusted = true;
	}

	public synchronized void show()
	{
		Rectangle bounds = getParent().bounds();
		Rectangle abounds = bounds();

		move(bounds.x + (bounds.width - abounds.width)/ 2,
			 bounds.y + (bounds.height - abounds.height)/2);

		super.show();
	}

	//{{DECLARE_CONTROLS
	java.awt.Label label1;
	java.awt.Button okButton;
	//}}

    // Used for addNotify redundency check.
	boolean fComponentsAdjusted = false;

	class SymWindow extends java.awt.event.WindowAdapter
	{
	    // we disabled this, because the window manager
	    // can call this function in an infinite loop
	    // by not overiding things seem to work
		public void disabled__windowClosed(java.awt.event.WindowEvent event)
		{
	        Object object = event.getSource();
			if (object == AboutDialog.this)
				AboutDialog_WindowClose(event);
		}

		public void windowClosing(java.awt.event.WindowEvent event)
		{
	        Object object = event.getSource();
			if (object == AboutDialog.this)
				AboutDialog_WindowClosing(event);
		}

    	void AboutDialog_WindowClose(java.awt.event.WindowEvent event)
    	{
    		// to do: code goes here.
            if (flashPlayer != null) 
            {
                flashPlayer.Shutdown();
                flashPlayer = null;
            }            

    		dispose();
    	}

    	void AboutDialog_WindowClosing(java.awt.event.WindowEvent event)
    	{
            if (flashPlayer != null) 
            {
                flashPlayer.Shutdown();
                flashPlayer = null;
            }            
            dispose();
    	}
	}


	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == okButton)
				okButton_Clicked(event);
		}

    	void okButton_Clicked(java.awt.event.ActionEvent event)
    	{
    		//{{CONNECTION
    		// Clicked from okButton Hide the Dialog
            if (flashPlayer != null) 
            {
                flashPlayer.Shutdown();
                flashPlayer = null;
            }            

    		dispose();
    		//}}
    	}
	}



	class SymMouse extends java.awt.event.MouseAdapter
	{
		public void mouseClicked(java.awt.event.MouseEvent event)
		{
			Object object = event.getSource();
			if (object == AboutDialog.this)
				AboutDialog_MouseClick(event);
		}
        
    	void AboutDialog_MouseClick(java.awt.event.MouseEvent event)
    	{
    		// to do: code goes here.
            if (flashPlayer != null) 
            {
                flashPlayer.Shutdown();
                flashPlayer = null;
            }            

            dispose();
    	}
	}
}
