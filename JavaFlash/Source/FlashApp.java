/*===========================================================================
|                                         
|                     Copyright 1994-97 Macromedia, Inc. 
|                                         
|      This material is the confidential trade secret and proprietary  
|      information of Macromedia, Inc.  It may not be reproduced, used,
|      sold or transferred to any third party without the prior written
|      consent of Macromedia, Inc.  All rights reserved.
|
|==========================================================================*/

//package com.macromedia.flash;

/*
	This simple extension of the java.awt.Frame class
	contains all the elements necessary to act as the
	main window of an application.
 */

import java.awt.*;
import java.io.*;
import java.awt.event.*; 

import symantec.itools.awt.util.ProgressBar;
import symantec.itools.awt.DirectionButton;
import symantec.itools.awt.util.ToolBarPanel;
public class FlashApp extends Frame
{
    FlashApi flashPlayer;
    
    private class AWTEventToEvent implements MouseListener, MouseMotionListener
    {
        Event evt = new Event(null, 0, null);

        private void sendEvent(int evtType, MouseEvent awtEvt)
        {
            
            evt.id = evtType;
            evt.x = awtEvt.getX();
            evt.y = awtEvt.getY();
            evt.clickCount = awtEvt.getClickCount();
            flashPlayer.HandleEvent(evt);
        }
                
        /**
         * Invoked when the mouse has been clicked on a component.
         */
        public void mouseClicked(MouseEvent awtEvt)
        {
            sendEvent(Event.MOUSE_DOWN, awtEvt);
        }

        /**
         * Invoked when the mouse enters a component.
         */
        public void mouseEntered(MouseEvent awtEvt)
        {
            sendEvent(Event.MOUSE_ENTER, awtEvt);
        }

        /**
         * Invoked when the mouse exits a component.
         */
        public void mouseExited(MouseEvent awtEvt)
        {
            sendEvent(Event.MOUSE_EXIT, awtEvt);
        }


        /**
         * Invoked when a mouse button has been pressed on a component.
         */
        public void mousePressed(MouseEvent awtEvt)
        {
            sendEvent(Event.MOUSE_DOWN, awtEvt);
        }


        public void mouseReleased(MouseEvent awtEvt)
        {
            sendEvent(Event.MOUSE_UP, awtEvt);
        }
       
        /**
         * Invoked when a mouse button is pressed on a component and then dragged.
         */
        public void mouseDragged(MouseEvent awtEvt)
        {
            sendEvent(Event.MOUSE_DRAG, awtEvt);
        }

        /**
         * Invoked when the mouse button has been moved on a component (with no buttons no down).
         */
        public void mouseMoved(MouseEvent awtEvt)
        {
            sendEvent(Event.MOUSE_MOVE, awtEvt);
        }
    }
    
    class ProgressMonitor implements Runnable
    {
        public void run ()
        {
            int percent;

            while (true)
            {
                percent = flashPlayer.PercentLoaded();
                
                try {
                    progressBar.setProgressPercent(percent);
                } catch (Exception e) {};                    
                
                // let others breathe
                Thread.yield();
                
                // no need to keep updating 100%
                if (percent == 100)
                    return;
            }                
        }
    }
    
	public FlashApp()
	{
        flashPlayer = new FlashApi(new Flash());

        //
        // add the needed mouse listeners
        //
        AWTEventToEvent eventListener = new AWTEventToEvent();
        addMouseListener(eventListener);
        addMouseMotionListener(eventListener);

		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.

		//{{INIT_CONTROLS
		setLayout(null);
		setVisible(false);
		setSize(insets().left + insets().right + 500,insets().top + insets().bottom + 380);
		setFont(new Font("Dialog", Font.PLAIN, 12));
		openFileDialog1 = new java.awt.FileDialog(this);
		openFileDialog1.setMode(FileDialog.LOAD);
		openFileDialog1.setTitle("Open");
		//$$ openFileDialog1.move(24,180);
		progressBar = new symantec.itools.awt.util.ProgressBar();
		try {
			progressBar.setBevelStyle(symantec.itools.awt.util.ProgressBar.BEVEL_LOWERED);
		}
		catch(java.beans.PropertyVetoException e) { }
		try {
			progressBar.setBorderIndent(symantec.itools.awt.util.ProgressBar.INDENT_TWO);
		}
		catch(java.beans.PropertyVetoException e) { }
		progressBar.setBounds(insets().left + 18,insets().top + 18,168,24);
		add(progressBar);
		left = new symantec.itools.awt.DirectionButton();
		try {
			left.setBevelHeight(0);
		}
		catch(java.beans.PropertyVetoException e) { }
		try {
			left.setBorderColor(java.awt.Color.lightGray);
		}
		catch(java.beans.PropertyVetoException e) { }
		try {
			left.setArrowIndent(3);
		}
		catch(java.beans.PropertyVetoException e) { }
		left.setBounds(insets().left + 426,insets().top + 18,20,23);
		add(left);
		right = new symantec.itools.awt.DirectionButton();
		try {
			right.setBevelHeight(0);
		}
		catch(java.beans.PropertyVetoException e) { }
		try {
			right.setDirection(symantec.itools.awt.DirectionButton.RIGHT);
		}
		catch(java.beans.PropertyVetoException e) { }
		try {
			right.setBorderColor(java.awt.Color.lightGray);
		}
		catch(java.beans.PropertyVetoException e) { }
		try {
			right.setArrowIndent(3);
		}
		catch(java.beans.PropertyVetoException e) { }
		right.setBounds(insets().left + 462,insets().top + 18,20,23);
		add(right);
		up = new symantec.itools.awt.DirectionButton();
		try {
			up.setBevelHeight(0);
		}
		catch(java.beans.PropertyVetoException e) { }
		try {
			up.setDirection(symantec.itools.awt.DirectionButton.UP);
		}
		catch(java.beans.PropertyVetoException e) { }
		try {
			up.setBorderColor(java.awt.Color.lightGray);
		}
		catch(java.beans.PropertyVetoException e) { }
		try {
			up.setArrowIndent(3);
		}
		catch(java.beans.PropertyVetoException e) { }
		up.setBounds(insets().left + 444,insets().top + 0,20,23);
		add(up);
		down = new symantec.itools.awt.DirectionButton();
		try {
			down.setBevelHeight(0);
		}
		catch(java.beans.PropertyVetoException e) { }
		try {
			down.setDirection(symantec.itools.awt.DirectionButton.DOWN);
		}
		catch(java.beans.PropertyVetoException e) { }
		try {
			down.setBorderColor(java.awt.Color.lightGray);
		}
		catch(java.beans.PropertyVetoException e) { }
		try {
			down.setArrowIndent(3);
		}
		catch(java.beans.PropertyVetoException e) { }
		down.setBounds(insets().left + 444,insets().top + 36,20,23);
		add(down);
		canvas1 = new java.awt.Canvas();
		canvas1.setBounds(insets().left + 0,insets().top + 0,10000,60);
		canvas1.setBackground(java.awt.Color.lightGray);
		add(canvas1);
		setTitle("A Basic Application");
		//}}

		//{{INIT_MENUS
		menuBar1 = new java.awt.MenuBar();
		meFile = new java.awt.Menu("File");
		miNew = new java.awt.MenuItem("New");
		meFile.add(miNew);
		miOpen = new java.awt.MenuItem("Open");
		meFile.add(miOpen);
		meFile.addSeparator();
		miStopSound = new java.awt.MenuItem("Stop Sound");
		meFile.add(miStopSound);
		cmiMuteSound = new java.awt.CheckboxMenuItem("Mute Sound");
		cmiMuteSound.setState(false);
		meFile.add(cmiMuteSound);
		cmiHigh = new java.awt.CheckboxMenuItem("High Quality");
		cmiHigh.setState(false);
		meFile.add(cmiHigh);
		meFile.addSeparator();
		miHideTools = new java.awt.MenuItem("Hide Tools Bar");
		meFile.add(miHideTools);
		miShowTools = new java.awt.MenuItem("Show Tools Bar");
		meFile.add(miShowTools);
		meFile.addSeparator();
		miExit = new java.awt.MenuItem("Exit");
		meFile.add(miExit);
		menuBar1.add(meFile);
		mePlay = new java.awt.Menu("Play");
		cmiPlay = new java.awt.CheckboxMenuItem("Play");
		cmiPlay.setState(false);
		mePlay.add(cmiPlay);
		cmiLoop = new java.awt.CheckboxMenuItem("Loop");
		cmiLoop.setState(true);
		mePlay.add(cmiLoop);
		mePlay.addSeparator();
		miRewind = new java.awt.MenuItem("Rewind");
		mePlay.add(miRewind);
		miForward = new java.awt.MenuItem("Forward");
		mePlay.add(miForward);
		miBack = new java.awt.MenuItem("Back");
		mePlay.add(miBack);
		menuBar1.add(mePlay);
		meZoom = new java.awt.Menu("Zoom");
		miZoomIn = new java.awt.MenuItem("Zoom In");
		meZoom.add(miZoomIn);
		miZoomOut = new java.awt.MenuItem("Zoom Out");
		meZoom.add(miZoomOut);
		miShowAll = new java.awt.MenuItem("Show All");
		meZoom.add(miShowAll);
		miZoomRect = new java.awt.MenuItem("Zoom Rect");
		meZoom.add(miZoomRect);
		menuBar1.add(meZoom);
		meHelp = new java.awt.Menu("Help");
		miAbout = new java.awt.MenuItem("About");
		meHelp.add(miAbout);
		menuBar1.add(meHelp);
		setMenuBar(menuBar1);
		//$$ menuBar1.move(0,180);
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		miNew.addActionListener(lSymAction);
		miOpen.addActionListener(lSymAction);
		miAbout.addActionListener(lSymAction);
		miExit.addActionListener(lSymAction);
		SymItem lSymItem = new SymItem();
		cmiPlay.addItemListener(lSymItem);
		cmiLoop.addItemListener(lSymItem);
		cmiHigh.addItemListener(lSymItem);
		miForward.addActionListener(lSymAction);
		miBack.addActionListener(lSymAction);
		miRewind.addActionListener(lSymAction);
		miZoomIn.addActionListener(lSymAction);
		miStopSound.addActionListener(lSymAction);
		cmiMuteSound.addItemListener(lSymItem);
		SymMouse aSymMouse = new SymMouse();
		left.addMouseListener(aSymMouse);
		right.addMouseListener(aSymMouse);
		up.addMouseListener(aSymMouse);
		down.addMouseListener(aSymMouse);
		miZoomOut.addActionListener(lSymAction);
		miShowAll.addActionListener(lSymAction);
		miZoomRect.addActionListener(lSymAction);
		miHideTools.addActionListener(lSymAction);
		miShowTools.addActionListener(lSymAction);
		//}}
	
		//{{REGISTER_LISTENERS
		//}}
	}

	public FlashApp(String title)
	{
		this();
		setTitle(title);
	}

    public void update(Graphics g)
    {
        g.clearRect(0, 0, bounds().width, bounds().height);
        if (flashPlayer != null)
            flashPlayer.Update(g);
    }
    
    public void paint(Graphics g)
    {
        if (flashPlayer != null)
            flashPlayer.Paint(g);
    }
    
	public synchronized void show()
	{
		move(50, 50);
		super.show();
	}

	static public void main(String args[])
	{
		(new FlashApp()).show();
	}

	public void addNotify()
	{
	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();

		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

    // Used for addNotify check.
	boolean fComponentsAdjusted = false;

	//{{DECLARE_CONTROLS
	java.awt.FileDialog openFileDialog1;
	symantec.itools.awt.util.ProgressBar progressBar;
	symantec.itools.awt.DirectionButton left;
	symantec.itools.awt.DirectionButton right;
	symantec.itools.awt.DirectionButton up;
	symantec.itools.awt.DirectionButton down;
	java.awt.Canvas canvas1;
	//}}

	//{{DECLARE_MENUS
	java.awt.MenuBar menuBar1;
	java.awt.Menu meFile;
	java.awt.MenuItem miNew;
	java.awt.MenuItem miOpen;
	java.awt.MenuItem miStopSound;
	java.awt.CheckboxMenuItem cmiMuteSound;
	java.awt.CheckboxMenuItem cmiHigh;
	java.awt.MenuItem miHideTools;
	java.awt.MenuItem miShowTools;
	java.awt.MenuItem miExit;
	java.awt.Menu mePlay;
	java.awt.CheckboxMenuItem cmiPlay;
	java.awt.CheckboxMenuItem cmiLoop;
	java.awt.MenuItem miRewind;
	java.awt.MenuItem miForward;
	java.awt.MenuItem miBack;
	java.awt.Menu meZoom;
	java.awt.MenuItem miZoomIn;
	java.awt.MenuItem miZoomOut;
	java.awt.MenuItem miShowAll;
	java.awt.MenuItem miZoomRect;
	java.awt.Menu meHelp;
	java.awt.MenuItem miAbout;
	//}}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == FlashApp.this)
				FlashApp_WindowClosing(event);
		}
	}

	void FlashApp_WindowClosing(java.awt.event.WindowEvent event)
	{
		hide();		 // hide the Frame
		dispose();	  // free the system resources
		System.exit(0); // close the application
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == miNew)
				miNew_Action(event);
			else if (object == miOpen)
				miOpen_Action(event);
			else if (object == miAbout)
				miAbout_Action(event);
			else if (object == miExit)
				miExit_Action(event);
			else if (object == miForward)
				miForward_Action(event);
			else if (object == miBack)
				miBack_Action(event);
			else if (object == miRewind)
				miRewind_Action(event);
			else if (object == miZoomIn)
				miZoomIn_Action(event);
			else if (object == miStopSound)
				miStopSound_Action(event);
			else if (object == miZoomOut)
				miZoomOut_Action(event);
			else if (object == miShowAll)
				miShowAll_Action(event);
			else if (object == miZoomRect)
				miZoomRect_Action(event);
			else if (object == miHideTools)
				miHideTools_Action(event);
			else if (object == miShowTools)
				miShowTools_Action(event);
		}
	}

	void miNew_Action(java.awt.event.ActionEvent event)
	{
		//{{CONNECTION
		// Action from About Create and show as modal
		(new FlashApp()).main(null);
		//}}
	}

	void miAbout_Action(java.awt.event.ActionEvent event)
	{
		//{{CONNECTION
		// Action from About Create and show as modal
		(new AboutDialog(this, true)).show();
		//}}
	}

	void miExit_Action(java.awt.event.ActionEvent event)
	{
		//{{CONNECTION
		// Action from Exit Create and show as modal
		(new QuitDialog(this, true)).show();
		//}}
	}

	void miOpen_Action(java.awt.event.ActionEvent event)
	{
		//{{CONNECTION
		// Action from Open... Show the OpenFileDialog
		openFileDialog1.show();
		
		// load flash movie
		try {
		    String dir = openFileDialog1.getDirectory();


            //
            // create a controll obect for the flash object
            // and give it an area to draw in
            //
            flashPlayer = new FlashApi(new Flash());
            flashPlayer.SetComponent(this);

            // loadr script ant start rendering thread
		    flashPlayer.LoadScript(new FileInputStream(dir + openFileDialog1.getFile()));
            flashPlayer.Startup();

            // start up the progress bar
            Thread progress = new Thread(new ProgressMonitor());
            progress.start();
		} catch (IOException e) {
		    //
            flashPlayer.Shutdown();
		}

		//}}
	}

	class SymItem implements java.awt.event.ItemListener
	{
		public void itemStateChanged(java.awt.event.ItemEvent event)
		{
			Object object = event.getSource();
			if (object == cmiPlay)
				cmiPlay_ItemStateChanged(event);
			else if (object == cmiLoop)
				cmiLoop_ItemStateChanged(event);
			else if (object == cmiHigh)
				cmiHigh_ItemStateChanged(event);
			else if (object == cmiMuteSound)
				cmiMuteSound_ItemStateChanged(event);
		}
	}

	void cmiPlay_ItemStateChanged(java.awt.event.ItemEvent event)
	{
		// to do: code goes here.
		if (event.getStateChange() == ItemEvent.SELECTED)
		    flashPlayer.Play();
        else
            flashPlayer.StopPlay();
	}

	void cmiLoop_ItemStateChanged(java.awt.event.ItemEvent event)
	{
		// to do: code goes here.
		if (event.getStateChange() == ItemEvent.SELECTED)
		    flashPlayer.SetLoop(true);
        else
            flashPlayer.SetLoop(false);
	}

	void cmiHigh_ItemStateChanged(java.awt.event.ItemEvent event)
	{
		// to do: code goes here.
		if (event.getStateChange() == ItemEvent.SELECTED)
		    flashPlayer.SetQuality(FlashApi.QUALITY_HIGH, true);
        else
            flashPlayer.SetQuality(FlashApi.QUALITY_LOW, true);
	}

	void miForward_Action(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
        flashPlayer.Forward();
	}

	void miBack_Action(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
        flashPlayer.Back();
    }		

	void miRewind_Action(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
        flashPlayer.Rewind();
	}

	void miStopSound_Action(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
		flashPlayer.StopSound();
	}

	void cmiMuteSound_ItemStateChanged(java.awt.event.ItemEvent event)
	{
		// to do: code goes here.
		if (event.getStateChange() == ItemEvent.SELECTED)
            flashPlayer.SetSoundMute(true);
        else
             flashPlayer.SetSoundMute(false);
	}

	class SymMouse extends java.awt.event.MouseAdapter
	{
		public void mousePressed(java.awt.event.MouseEvent event)
		{
			Object object = event.getSource();
			if (object == left)
				left_mousePressed(event);
			else if (object == right)
				right_mousePressed(event);
			else if (object == up)
				up_mousePressed(event);
			else if (object == down)
				down_mousePressed(event);
		}
	}

	void left_mousePressed(java.awt.event.MouseEvent event)
	{
		// to do: code goes here.
        Rectangle r = flashPlayer.GetBounds();
        Graphics g = getGraphics();
        g.clearRect(r.x + r.width - 10, r.y, 10, r.height);
		flashPlayer.Pan(-10, 0, 0);
        flashPlayer.Update(g);
	}

	void right_mousePressed(java.awt.event.MouseEvent event)
	{
		// to do: code goes here.
        Rectangle r = flashPlayer.GetBounds();
        Graphics g = getGraphics();
        g.clearRect(r.x, r.y, 10, r.height);
        flashPlayer.Pan(10, 0, 0);
        flashPlayer.Update(g);
	}

	void up_mousePressed(java.awt.event.MouseEvent event)
	{
		// to do: code goes here.
        Rectangle r = flashPlayer.GetBounds();
        Graphics g = getGraphics();
        g.clearRect(r.x, r.y + r.height - 10, r.width, 10);
        flashPlayer.Pan(0, -10, 0);
        flashPlayer.Update(g);
	}

	void down_mousePressed(java.awt.event.MouseEvent event)
	{
		// to do: code goes here.
        Rectangle r = flashPlayer.GetBounds();
        Graphics g = getGraphics();
        g.clearRect(r.x, r.y, r.width, 10);
        flashPlayer.Pan(0, 10, 0);
        flashPlayer.Update(g);
	}

	void miZoomIn_Action(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
		flashPlayer.Zoom(75);
        Graphics g = getGraphics();
        flashPlayer.Update(g);
	}

	void miZoomOut_Action(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
        flashPlayer.Zoom(125);
        Graphics g = getGraphics();
        Rectangle r = bounds();
        g.clearRect(0, 0, r.width, r.height);
        flashPlayer.Update(g);
	}

	void miShowAll_Action(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
        flashPlayer.Zoom(0);
        Graphics g = getGraphics();
        Rectangle r = bounds();
        flashPlayer.SetTranslate(0, 0);
        g.clearRect(0, 0, r.width, r.height);
        flashPlayer.Update(g);
	}

	void miZoomRect_Action(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
		(new ZoomDialog(this, true)).show();
	}

	void miHideTools_Action(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
		canvas1.setVisible(false);
        progressBar.setVisible(false);
        left.setVisible(false);
        right.setVisible(false);
        up.setVisible(false);
        down.setVisible(false);
	}

	void miShowTools_Action(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
		canvas1.setVisible(true);
        progressBar.setVisible(true);
        left.setVisible(true);
        right.setVisible(true);
        up.setVisible(true);
        down.setVisible(true);
	}
}

